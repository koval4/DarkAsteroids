Break game flow to game states using FSM
 |- init state
 |- main menu state
 |- loading state
 |- world generarion state
 |- player characters creation state
 |- world interaction state
 |- action phase state
 |- action phase state
 |- travel state
 |- pause state
Refactor Screen class to separate Window and Renderer classes
Refactor Texture class
Implement text input widget
Make main menu UI
Make player character creation UI
Make simple npc FSM (seek & destroy)
Add game saves
 |- add Serializable class
Add Property class (contains formula of calculations, calculated value, uses listener pattern)
Implement entity-component system
Rework biologycal system
 |- relook pain shock
 |- add vital organs system
 |- add reactins to system changes
 |- add asphyxation effect
 |- add vomit
 |- add loss of consciousnes
Refactor items
 |- break inheritance system, use entity-components approach instead
 |- add physical object component
 |- add material property
 |- add items quality
Make items recursive struct (item consists of multiple components)
Refactor UI system
 |- add Resizable class
 |- add abstract WidgetsContainer class
 |- add layouts (inherited from WidgetsContainer)
 |- add WidgetsManager class (tree of widgets, holds ownership of widget, draws widgets starting from root)
 |- add Scene class (will manage rendering of game objects)
 |- implement enabled field in widgets
 |- make gui generatin from text file (dunno how to implement listeners in text file)
------------------------
Make find_path free function
Add thermal calculations
Rewrite parameters and skills
Place items in dungeon rooms
Add npc groups
Add air resistance and thermal losses during ranged attack (add air into tiles, it will act just like item)
Improve dungeon generation algorithm
Make dungeon regions
Improve map drawing (add primitive raycasting)
Add Database class
Add Output class (Used for info output on screen)
Add sprites to items
Make scriptable npc logic
Add object counters for checking if memory is leaked
Add Logger class
